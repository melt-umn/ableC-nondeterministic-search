#include <stdlib.h>

#include <refcount.h>

#ifndef _TASK_XH
#define _TASK_XH

typedef struct task_buffer task_buffer_t;

typedef closure<(task_buffer_t *const) -> void> task_t;

struct task_buffer {
  task_t *tasks;
  size_t size;
  size_t capacity;
  _Bool isFrameOpened;
  struct frame {
    size_t start;
    size_t end;
  } currentFrame;
  struct frame *frames;
  size_t framesSize;
  size_t framesCapacity;
};

/**
 * Initialize a new task buffer.
 * 
 * @param capacity The initial capacity of the buffer.
 * @param frameStartsCapacity The initial frame capacity of the buffer.
 * @return An initialized task buffer struct.
 */
task_buffer_t create_task_buffer(size_t capacity, size_t framesCapacity);
/**
 * Destroy a task buffer.
 * 
 * @param buffer The buffer to destroy.
 */
void destroy_task_buffer(task_buffer_t buffer);

/**
 * Open a new frame of tasks to execute in FIFO order.
 * 
 * @param p_buffer A pointer to the buffer for which to open a frame.
 */
void open_frame(task_buffer_t *const p_buffer);
/**
 * Place a task in a buffer.
 * 
 * @param p_buffer A pointer to the buffer for which to put a task.
 * @param task The task to put.
 */
void put_task(task_buffer_t *const p_buffer, task_t task);
/**
 * Get a task from a buffer, if one is available.
 * 
 * @param p_buffer A pointer to the buffer for which to get a task.
 * @param task A pointer to a task to be filled in.
 * @return The number of elements initially in the buffer.
 */
size_t get_task(task_buffer_t *const p_buffer, task_t *task);

#endif
